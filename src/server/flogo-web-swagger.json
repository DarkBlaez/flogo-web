{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Flogo Web",
    "x-lastModified": "Mar 30, 2016 01:21AM PST",
    "description": "Restful api of Flogo Web"
  },
  "paths": {
    "/flows": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get flows successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/flow"
              }
            },
            "examples": {
              "application/json": [
                {
                  "name": "Payroll Distribution",
                  "description": "Chase payroll",
                  "created": "1459288333311",
                  "updated": "1459288333311"
                },
                {
                  "name": "Hello World",
                  "description": "My first flow",
                  "created": "1459288333311",
                  "updated": "1459288333311"
                }
              ]
            }
          },
          "default": {
            "description": "default response"
          }
        },
        "parameters": [],
        "description": "get all flows"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "created successful",
            "schema": {
              "$ref": "#/definitions/flow success"
            },
            "examples": {
              "application/json": {
                "id": "1211"
              }
            }
          },
          "default": {
            "description": "default response"
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Add a flow",
            "schema": {
              "$ref": "#/definitions/flow"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "description": "create a flow"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "update successful",
            "schema": {
              "$ref": "#/definitions/flow success"
            }
          },
          "default": {
            "description": "default response"
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Flows information",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/flow"
              }
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "description": "Update one or multiple flows"
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "delete success",
            "schema": {
              "$ref": "#/definitions/success"
            }
          },
          "default": {
            "description": "default response"
          }
        },
        "parameters": [
          {
            "name": "flowIds",
            "in": "header",
            "description": "the flow's id which want to be deleted",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "",
              "default": ""
            }
          }
        ],
        "description": "delete one or multiple flows"
      }
    },
    "/flows/:id": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "get flow detail successful",
            "schema": {
              "$ref": "#/definitions/flow detail"
            }
          },
          "default": {
            "description": "default response"
          }
        },
        "parameters": [],
        "description": "get the detail of a flow"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "update success",
            "schema": {
              "$ref": "#/definitions/flow success"
            }
          },
          "default": {
            "description": "default response"
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "You can just pass {\"name\":\"new name\"}, then name will be updated, same for items, paths ....",
            "schema": {
              "$ref": "#/definitions/flow detail"
            }
          }
        ],
        "description": "update a flow",
        "consumes": [
          "application/json"
        ]
      }
    },
    "/activities": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "get activities successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/activity"
              }
            },
            "examples": {
              "application/json": {
                "name": "tibco-pet-query",
                "version": "0.1.0",
                "description": "Query a pet's infromation",
                "title": "TIBCO Pet Query",
                "category": "activity",
                "inputs": [
                  {
                    "name": "petId"
                  }
                ],
                "outputs": [
                  {
                    "name": "result",
                    "type": "object"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "default response"
          }
        },
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "If don't pass, then return all activities. If pass \"installed\", then just return installed activities. If pass \"none\", then return none installed activities",
            "required": false,
            "type": "string",
            "format": "",
            "default": ""
          }
        ],
        "description": "get activities"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "installed successful",
            "schema": {
              "$ref": "#/definitions/success"
            }
          },
          "default": {
            "description": "default response"
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/activity info"
              }
            }
          }
        ],
        "description": "install one or multiple activites",
        "consumes": [
          "application/json"
        ]
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "uninstall success",
            "schema": {
              "$ref": "#/definitions/success"
            }
          },
          "default": {
            "description": "default response"
          }
        },
        "parameters": [
          {
            "name": "activities",
            "in": "header",
            "description": "activity name, package name",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "",
              "default": ""
            }
          }
        ],
        "description": "uninstall one or multiple activities"
      }
    },
    "/triggers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "get triggers",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/trigger"
              }
            },
            "examples": {
              "application/json": {
                "name": "trigger name",
                "version": "0.0.1",
                "description": "trigger description",
                "config": [
                  {
                    "name": "host",
                    "type": "string",
                    "value": "localhost"
                  },
                  {
                    "name": "port",
                    "type": "number",
                    "value": "8080"
                  }
                ]
              }
            }
          },
          "default": {
            "description": "default response"
          }
        },
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "If don't pass, then return all triggers. If pass \"installed\", then just return installed triggers. If pass \"none\", then return none installed triggers",
            "required": false,
            "type": "string",
            "format": "",
            "default": ""
          }
        ],
        "description": "get triggers"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "install success",
            "schema": {
              "$ref": "#/definitions/success"
            }
          },
          "default": {
            "description": "default response"
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/trigger info"
              }
            }
          }
        ],
        "description": "install one or multiple triggers",
        "consumes": [
          "application/json"
        ]
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "uninstall success",
            "schema": {
              "$ref": "#/definitions/success"
            }
          },
          "default": {
            "description": "default response"
          }
        },
        "parameters": [
          {
            "name": "triggers",
            "in": "header",
            "description": "trigger name",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "",
              "default": ""
            }
          }
        ],
        "description": "uninstall one or multiple triggers"
      }
    },
    "/flows/:id/configuration": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "get configuration json",
            "schema": {
              "$ref": "#/definitions/configuration json"
            },
            "examples": {
              "application/json": {
                "id": "RmxvZ29Qcm9jZXNzOjoxNDU5MzI2MDkwMjE0",
                "name": "Default process",
                "description": "This is a default process",
                "model": 0,
                "type": 0,
                "attributes": [
                  {
                    "name": "petInfo",
                    "type": "string",
                    "value": ""
                  }
                ],
                "rootTask": {
                  "id": "task 1",
                  "type": 1,
                  "version": "",
                  "name": "HTTP Trigger",
                  "description": "",
                  "title": "",
                  "activityType": 0,
                  "attributes": {},
                  "inputMappings": [],
                  "outputMappings": [],
                  "links": [
                    {
                      "id": "RmxvZ29GbG93RGlhZ3JhbVRhc2tMaW5rOjoxNDU5MzI2MDkwMjE0",
                      "from": "RmxvZ29GbG93RGlhZ3JhbU5vZGU6OjE0NTkzMjYwODg1MjI=",
                      "to": "RmxvZ29GbG93RGlhZ3JhbU5vZGU6OjE0NTkzMjYwODkzODk="
                    }
                  ],
                  "tasks": [
                    {
                      "id": "task 2",
                      "type": 1,
                      "version": "",
                      "name": "Log Start",
                      "description": "",
                      "title": "",
                      "activityType": 1,
                      "attributes": {
                        "inputs": [
                          {
                            "type": 0,
                            "name": "message",
                            "value": "Find Pet Process Started!"
                          },
                          {
                            "type": 3,
                            "name": "processInfo",
                            "value": "true"
                          }
                        ]
                      },
                      "inputMappings": [],
                      "outputMappings": []
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "default response"
          }
        },
        "parameters": [],
        "description": "get the flow's configuration json"
      }
    }
  },
  "definitions": {
    "flow": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of this flow, this id is generated in created time"
        },
        "name": {
          "type": "string",
          "description": "The name of flow"
        },
        "description": {
          "type": "string",
          "description": "The description of flow"
        },
        "created": {
          "type": "number",
          "description": "created time"
        },
        "updated": {
          "type": "number",
          "description": "updated to server time"
        }
      }
    },
    "flow success": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of this flow"
        }
      }
    },
    "flow detail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "flow id"
        },
        "name": {
          "type": "string",
          "description": "flow name"
        },
        "description": {
          "type": "string",
          "description": "flow description"
        },
        "created": {
          "type": "number",
          "description": "created utc timestamp"
        },
        "updated": {
          "type": "string",
          "description": "updated utc timestamp"
        },
        "items": {
          "type": "object",
          "description": ""
        },
        "paths": {
          "type": "object",
          "description": ""
        }
      }
    },
    "activity": {
      "type": "object",
      "properties": {}
    },
    "activity info": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "the node package name. the value is defined in schema"
        },
        "version": {
          "type": "string",
          "description": "the version of node package. This value isn't implemented"
        }
      }
    },
    "success": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "trigger": {
      "type": "object",
      "properties": {}
    },
    "trigger info": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "the node package name. the value is defined in schema"
        },
        "version": {
          "type": "string",
          "description": "the version of node package. This value isn't implemented"
        }
      }
    },
    "configuration json": {
      "type": "object",
      "properties": {}
    }
  }
}